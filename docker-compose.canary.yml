version: '3.8'

services:
  # Load Balancer and Router (Traefik)
  traefik:
    image: traefik:v2.10
    command:
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--api.insecure=true"
      - "--accesslog=true"
    ports:
      - "80:80"     # Web traffic
      - "8080:8080" # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - neotix-network
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
        - "traefik.http.routers.dashboard.service=api@internal"

  # Main API - Stable Version (80% of traffic)
  neotix-api:
    image: neotix/main-api:stable
    networks:
      - neotix-network
    environment:
      - DATABASE_URI=postgresql://postgres:postgres@db:5432/neotix
      - FLASK_APP=app.py
      - FLASK_ENV=production
    volumes:
      - ./firebaseKey.json:/app/firebaseKey.json
    depends_on:
      - db
    deploy:
      replicas: 4
      labels:
        - "traefik.enable=true"
        - "traefik.http.services.neotix-api-stable.loadbalancer.server.port=5000"
        - "traefik.http.routers.neotix-api-stable.rule=Host(`api.localhost`) && PathPrefix(`/api`)"
        - "traefik.http.routers.neotix-api-stable.service=neotix-api-service"
        - "traefik.http.services.neotix-api-service.loadbalancer.sticky=true"
        - "traefik.http.services.neotix-api-service.loadbalancer.sticky.cookie.name=neotix_session"
        - "traefik.http.routers.neotix-api-stable.priority=1"
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        limits:
          cpus: '0.3'
          memory: 384M

  # Main API - Canary Version (20% of traffic)
  neotix-api-canary:
    image: neotix/main-api:canary
    networks:
      - neotix-network
    environment:
      - DATABASE_URI=postgresql://postgres:postgres@db:5432/neotix
      - FLASK_APP=app.py
      - FLASK_ENV=production
      - CANARY=true
    volumes:
      - ./firebaseKey.json:/app/firebaseKey.json
    depends_on:
      - db
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.http.services.neotix-api-canary.loadbalancer.server.port=5000"
        - "traefik.http.routers.neotix-api-canary.rule=Host(`api.localhost`) && PathPrefix(`/api`) && Headers(`X-Canary`, `true`)"
        - "traefik.http.routers.neotix-api-canary.service=neotix-api-canary-service"
        - "traefik.http.services.neotix-api-canary-service.loadbalancer.sticky=true"
        - "traefik.http.services.neotix-api-canary-service.loadbalancer.sticky.cookie.name=neotix_canary_session"
        - "traefik.http.routers.neotix-api-canary.priority=2"
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        limits:
          cpus: '0.3'
          memory: 384M

  # GCP Deployment API - Stable Version (80% of traffic)
  gcp-deployment-api:
    image: neotix/gcp-deployment-api:stable
    networks:
      - neotix-network
    environment:
      - DATABASE_URI=postgresql://postgres:postgres@db:5432/gcp_deployment
      - FLASK_APP=app.py
      - FLASK_ENV=production
      - JWT_SECRET_KEY=b_NhAhlPX0AUz-YBHG29o37y-GdSbCwzJb8t5nmGNNc
      - NEOTIX_API_BASE_URL=http://neotix-api:5000
    depends_on:
      - db
    deploy:
      replicas: 2
      labels:
        - "traefik.enable=true"
        - "traefik.http.services.gcp-api-stable.loadbalancer.server.port=5001"
        - "traefik.http.routers.gcp-api-stable.rule=Host(`api.localhost`) && PathPrefix(`/gcp`)"
        - "traefik.http.routers.gcp-api-stable.service=gcp-api-service"
        - "traefik.http.services.gcp-api-service.loadbalancer.sticky=true"
        - "traefik.http.services.gcp-api-service.loadbalancer.sticky.cookie.name=gcp_session"
        - "traefik.http.middlewares.gcp-api-strip.stripprefix.prefixes=/gcp"
        - "traefik.http.routers.gcp-api-stable.middlewares=gcp-api-strip"
        - "traefik.http.routers.gcp-api-stable.priority=1"
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

  # GCP Deployment API - Canary Version (20% of traffic)
  gcp-deployment-api-canary:
    image: neotix/gcp-deployment-api:canary
    networks:
      - neotix-network
    environment:
      - DATABASE_URI=postgresql://postgres:postgres@db:5432/gcp_deployment
      - FLASK_APP=app.py
      - FLASK_ENV=production
      - JWT_SECRET_KEY=b_NhAhlPX0AUz-YBHG29o37y-GdSbCwzJb8t5nmGNNc
      - NEOTIX_API_BASE_URL=http://neotix-api:5000
      - CANARY=true
    depends_on:
      - db
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.http.services.gcp-api-canary.loadbalancer.server.port=5001"
        - "traefik.http.routers.gcp-api-canary.rule=Host(`api.localhost`) && PathPrefix(`/gcp`) && Headers(`X-Canary`, `true`)"
        - "traefik.http.routers.gcp-api-canary.service=gcp-api-canary-service"
        - "traefik.http.services.gcp-api-canary-service.loadbalancer.sticky=true"
        - "traefik.http.services.gcp-api-canary-service.loadbalancer.sticky.cookie.name=gcp_canary_session"
        - "traefik.http.middlewares.gcp-api-canary-strip.stripprefix.prefixes=/gcp"
        - "traefik.http.routers.gcp-api-canary.middlewares=gcp-api-canary-strip"
        - "traefik.http.routers.gcp-api-canary.priority=2"
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

  # PostgreSQL Database
  db:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=neotix,gcp_deployment
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-multiple-postgres-databases.sh:/docker-entrypoint-initdb.d/init-multiple-postgres-databases.sh
    networks:
      - neotix-network
    deploy:
      placement:
        constraints: [node.role == manager]

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - neotix-network
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.1.0
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - neotix-network
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"

networks:
  neotix-network:
    driver: overlay
    attachable: true

volumes:
  postgres-data:
  prometheus-data:
  grafana-data:
